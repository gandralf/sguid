{"version":3,"sources":["../src/toSguid.js"],"names":["toSguid","base64SecretKey","namespace","type","id","SguidError","payload","JSON","stringify","secretKey","message","nacl","sign"],"mappings":";;;;;;AAEA;;;;AACA;;AAKA;;AAGA;;;;AAXA;;AAkBA;;;;;;;;;AAMA,IAAMA,4BAAuB,SAAvBA,OAAuB,CAACC,eAAD,EAAkBC,SAAlB,EAA6BC,IAA7B,EAAmCC,EAAnC,EAA0C;AACrE,MAAI,CAACF,SAAL,EAAgB;AACd,UAAM,IAAIG,kBAAJ,CAAe,mCAAf,CAAN;AACD;;AAED,MAAI,CAACF,IAAL,EAAW;AACT,UAAM,IAAIE,kBAAJ,CAAe,4CAAf,CAAN;AACD;;AAED,MAAI,CAACD,EAAL,EAAS;AACP,UAAM,IAAIC,kBAAJ,CAAe,6CAAf,CAAN;AACD;;AAED,MAAMC,UAAUC,KAAKC,SAAL,CAAe;AAC7BJ,MAD6B;AAE7BF,aAF6B;AAG7BC;AAH6B,GAAf,CAAhB;;AAMA,MAAMM,YAAY,iCAAaR,eAAb,CAAlB;AACA,MAAMS,UAAU,+BAAWJ,OAAX,CAAhB;;AAEA,SAAO,uBAAU,iCAAaK,oBAAKC,IAAL,CAAUF,OAAV,EAAmBD,SAAnB,CAAb,CAAV,CAAP;AACD,CAvBD;;kBAyBeT,O","file":"toSguid.js","sourcesContent":["// @flow\n\nimport nacl from 'tweetnacl';\nimport {\n  decodeBase64,\n  decodeUTF8,\n  encodeBase64\n} from 'tweetnacl-util';\nimport {\n  escape as urlEscape\n} from 'base64-url';\nimport {\n  SguidError\n} from './errors';\nimport type {\n  ToSguidType\n} from './types';\n\n/**\n * @param base64SecretKey {@see https://github.com/gajus/sguid#generating-key-pair}\n * @param namespace A namespace of the GUID (e.g. company name or the application name).\n * @param type A resource type name (e.g. article).\n * @param id Resource identifier.\n */\nconst toSguid: ToSguidType = (base64SecretKey, namespace, type, id) => {\n  if (!namespace) {\n    throw new SguidError('Namespace values cannot be falsy.');\n  }\n\n  if (!type) {\n    throw new SguidError('Resource type name values cannot be falsy.');\n  }\n\n  if (!id) {\n    throw new SguidError('Resource identifier values cannot be falsy.');\n  }\n\n  const payload = JSON.stringify({\n    id,\n    namespace,\n    type\n  });\n\n  const secretKey = decodeBase64(base64SecretKey);\n  const message = decodeUTF8(payload);\n\n  return urlEscape(encodeBase64(nacl.sign(message, secretKey)));\n};\n\nexport default toSguid;\n"]}